* 기본적으로 컴파일 시에 모든 메모리가 할당이 완료되어야 함.
메모리 할당을 유연하게 하기 위한 것이 malloc(memory allocation)
메모리를 다 쓰고 난 후에 반환하는 것은 free


* 그렇다면 malloc()은 어디에 메모리를 할당하는가?
프로그램은 실행시 모든 내용이 RAM에 적재되는데, 이렇게 RAM 위에 올라오는 프로그램의 내용을 크게 2가지로 나눌 수 있음
1. 코드 세그먼트 (Code Segment)
2. 데이터 세그먼트 (Data Segment)

	메모리 주소 높음 - 스택/Stack (지역변수)
				힙/Heap (자유 할당/해제 - malloc/free, new/delete)
				데이터 영역 (전역 변수, 정적 변수)
				Read-Only Data (상수, 리터럴)
	메모리 주소 높음 - 코드 영역 (Code Segment)


* new()
- 사용 방법
	자료형* 변수이름 = new 자료형;
		e.g. int* p = new int;
- new()는 malloc()과 다르게 객체를 동적으로 생성하면서 동시에 자동으로 생성자도 호출.

* delete() 사용 방법
	delete 변수이름;
		e.g. delete p;


* 함수 오버로딩
C++ 에서는 컴파일러가 사용하는 인자를 보고 사용할 함수를 결정 짓기 때문에 같은 이름을 가진 함수가 여러개 존재 가능.
만약 자기와 정확히 일치하는 인자를 가지는 함수가 없을 경우, '자신과 최대로 근접한 함수'를 찾음.
	Step 1. 자신과 타입이 정확히 일치하는 함수가 있는지 찾는다.
	Step 2. 정확히 일치하는 타입이 없는 경우, 형변환을 통해 일치하는 함수를 찾아본다.
		 char, unsigned char, short -> int
		 unsigned short -> int의 크기에 따라 int 나 unsigned int
		 float -> double
		 Enum -> int
	Step 3. 위와 같이 변환해도 일치하는 것이 없다면 아래의 좀더 포괄적인 형변환을 통해 일치하는 함수를 찾는다.
	Step 4. 유저 정의된 타입 변환으로 일치하는 것을 찾는다.


* 생성자(Constructor)란 무엇인가?

- 객체 초기화를 위해 기본적으로 객체 생성시 자동으로 호출되는 함수
- 생성자 사용 방법:
	클래스 이름 (인자) {}
		e.g. Date(int year, int month, int day)
- 정의된 생성자를 사용해 객체를 생성할 때 호출하여 인자 넣어서 객체를 생성할 수 있음.
- 호출방법 2가지:
	1. 암시적 방법 (함수처럼 쓰는 방법)
		e.g. Date day(2024, 4, 11);
	2. 명시적 방법 (명시적으로 생성자를 호출한다는 것이 더 잘 보이도록 쓰는 방법)
		e.g. Date day = Date(2024, 4, 11);

* 디폴트 생성자(Default Constructor)
- 처음에 생성자 정의하지 않은채로 생성자를 호출하면 컴파일러가 디폴트 생성자를 호출함 -> 쓰레기값
- 디폴트 생성자를 직접 정의하는 것도 가능.


* 소멸자(Destructor)
- 객체가 생성될 때 자동으로 호출되었던 생성자처럼 소멸도 자동으로!
- 항상 인인자는 아무것도 가져오지 않음. void


* 함수 포인터란?
- 함수도 다른 변수들처럼 주소를 가지고 있으니까 그 함수 주소에 대한 포인터 사용이 가능
- 선언:
	int (*f)(int, int);
	
	(*f) 변수 이름 f를 함수포인터로 선언
- 예를 들어,
	#include <iostream>
	using namespace std;

	int add (int a, int b)
	{
		return (a + b);
	}

	int main(void)
	{
		int (*f)(int, int);

		f = add; // 함수 add를 함수 포인터 f에 저장
		cout << f(1, 2) << endl;
	}

- 함수 포인터를 인자로 넘겨줄 수 있음
- const 사용도 가능
- class의 멤버 함수도 함수 포인터로 사용가능 *****이번 과제의 주요포인트!*****
	- class 내부의 멤버 함수는 객체를 통해서만 출력이 가능학, 함수포인터의 선언 또한 해당 클래스의 범위 내에 이는 함수




[Reference]

- When should a class be allocated on the stack instead of the heap
https://stackoverflow.com/questions/12333062/when-should-a-class-be-allocated-on-the-stack-instead-of-the-heap
